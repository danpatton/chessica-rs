type Pst = [i16; 64];

// pub fn get_pst_material(&self, side: Side) -> i16 {
//     let (own_pieces, pawn_pst, rook_pst, king_pst) = match side {
//         Side::White => (self.white_pieces, &PST_WHITE_PAWN, &PST_WHITE_ROOK, &PST_WHITE_KING),
//         Side::Black => (self.black_pieces, &PST_BLACK_PAWN, &PST_BLACK_ROOK, &PST_BLACK_KING)
//     };
//     let bishop_pst = &PST_BISHOP;
//     let knight_pst = &PST_KNIGHT;
//     let queen_pst = &PST_QUEEN;
//     (self.pawns & own_pieces).map(|s| pawn_pst[s.ordinal as usize]).sum::<i16>() +
//         (self.bishops & own_pieces).map(|s| bishop_pst[s.ordinal as usize]).sum::<i16>() +
//         (self.knights & own_pieces).map(|s| knight_pst[s.ordinal as usize]).sum::<i16>() +
//         (self.rooks & own_pieces).map(|s| rook_pst[s.ordinal as usize]).sum::<i16>() +
//         (self.queens & own_pieces).map(|s| queen_pst[s.ordinal as usize]).sum::<i16>() +
//         (self.kings & own_pieces).map(|s| king_pst[s.ordinal as usize]).sum::<i16>()
// }

pub const PST_PAWN_MG: Pst = [
      0,   0,   0,   0,   0,   0,  0,   0,
     98, 134,  61,  95,  68, 126, 34, -11,
     -6,   7,  26,  31,  65,  56, 25, -20,
    -14,  13,   6,  21,  23,  12, 17, -23,
    -27,  -2,  -5,  12,  17,   6, 10, -25,
    -26,  -4,  -4, -10,   3,   3, 33, -12,
    -35,  -1, -20, -23, -15,  24, 38, -22,
      0,   0,   0,   0,   0,   0,  0,   0,
];

pub const PST_KNIGHT: Pst = [
    250, 290, 280, 290, 290, 280, 290, 250,
    270, 280, 300, 310, 310, 300, 280, 270,
    280, 300, 320, 320, 320, 320, 300, 280,
    280, 300, 320, 340, 340, 320, 300, 280,
    280, 300, 320, 340, 340, 320, 300, 280,
    280, 300, 320, 320, 320, 320, 300, 280,
    270, 280, 300, 310, 310, 300, 280, 270,
    250, 290, 280, 290, 290, 280, 290, 250,
];

pub const PST_BISHOP: Pst = [
    330, 300, 325, 325, 325, 325, 310, 330,
    310, 350, 325, 325, 325, 325, 350, 310,
    300, 325, 350, 325, 325, 350, 325, 300,
    300, 325, 325, 350, 350, 325, 325, 300,
    300, 325, 325, 350, 350, 325, 325, 300,
    300, 325, 350, 325, 325, 350, 325, 300,
    310, 350, 325, 325, 325, 325, 350, 310,
    330, 310, 300, 300, 300, 325, 310, 330,
];

pub const PST_WHITE_ROOK: Pst = [
    550, 550, 550, 550, 550, 550, 550, 550,
    600, 600, 600, 600, 600, 600, 600, 600,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    450, 500, 500, 550, 550, 550, 500, 450,
];

pub const PST_BLACK_ROOK: Pst = [
    450, 500, 500, 550, 550, 550, 500, 450,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    500, 500, 500, 500, 500, 500, 500, 500,
    600, 600, 600, 600, 600, 600, 600, 600,
    550, 550, 550, 550, 550, 550, 550, 550,
];

pub const PST_QUEEN: Pst = [
    900, 900, 900, 925, 900, 900, 900, 900,
    900, 900, 900, 900, 900, 900, 900, 900,
    900, 900, 900, 900, 900, 900, 900, 900,
    900, 900, 900, 900, 900, 900, 900, 900,
    900, 900, 900, 900, 900, 900, 900, 900,
    900, 900, 900, 900, 900, 900, 900, 900,
    900, 900, 900, 900, 900, 900, 900, 900,
    900, 900, 900, 925, 900, 900, 900, 900
];

pub const PST_WHITE_KING: Pst = [
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_200, 10_000, 10_100, 10_000, 10_250, 10_000,
];

pub const PST_BLACK_KING: Pst = [
    10_000, 10_000, 10_200, 10_000, 10_100, 10_000, 10_250, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
    10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000, 10_000,
];
